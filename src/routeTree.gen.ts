/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as ProtectedImport } from './app/routes/_protected'
import { Route as IndexImport } from './app/routes/index'
import { Route as authSignInImport } from './app/routes/(auth)/signIn'
import { Route as ProtectedBooksIndexImport } from './app/routes/_protected/books/index'
import { Route as ProtectedBooksCreateImport } from './app/routes/_protected/books/create'

// Create Virtual Routes

const ProtectedStatisticLazyImport = createFileRoute('/_protected/statistic')()
const ProtectedSettingsLazyImport = createFileRoute('/_protected/settings')()
const ProtectedReportsLazyImport = createFileRoute('/_protected/reports')()
const ProtectedProfileLazyImport = createFileRoute('/_protected/profile')()
const ProtectedGoalsLazyImport = createFileRoute('/_protected/goals')()
const authSignUpLazyImport = createFileRoute('/(auth)/signUp')()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedStatisticLazyRoute = ProtectedStatisticLazyImport.update({
  id: '/statistic',
  path: '/statistic',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./app/routes/_protected/statistic.lazy').then((d) => d.Route),
)

const ProtectedSettingsLazyRoute = ProtectedSettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./app/routes/_protected/settings.lazy').then((d) => d.Route),
)

const ProtectedReportsLazyRoute = ProtectedReportsLazyImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./app/routes/_protected/reports.lazy').then((d) => d.Route),
)

const ProtectedProfileLazyRoute = ProtectedProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./app/routes/_protected/profile.lazy').then((d) => d.Route),
)

const ProtectedGoalsLazyRoute = ProtectedGoalsLazyImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./app/routes/_protected/goals.lazy').then((d) => d.Route),
)

const authSignUpLazyRoute = authSignUpLazyImport
  .update({
    id: '/(auth)/signUp',
    path: '/signUp',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./app/routes/(auth)/signUp.lazy').then((d) => d.Route))

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/signIn',
  path: '/signIn',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedBooksIndexRoute = ProtectedBooksIndexImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedBooksCreateRoute = ProtectedBooksCreateImport.update({
  id: '/books/create',
  path: '/books/create',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signIn': {
      id: '/(auth)/signIn'
      path: '/signIn'
      fullPath: '/signIn'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signUp': {
      id: '/(auth)/signUp'
      path: '/signUp'
      fullPath: '/signUp'
      preLoaderRoute: typeof authSignUpLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/goals': {
      id: '/_protected/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof ProtectedGoalsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/reports': {
      id: '/_protected/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ProtectedReportsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/statistic': {
      id: '/_protected/statistic'
      path: '/statistic'
      fullPath: '/statistic'
      preLoaderRoute: typeof ProtectedStatisticLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/books/create': {
      id: '/_protected/books/create'
      path: '/books/create'
      fullPath: '/books/create'
      preLoaderRoute: typeof ProtectedBooksCreateImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/books/': {
      id: '/_protected/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof ProtectedBooksIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedGoalsLazyRoute: typeof ProtectedGoalsLazyRoute
  ProtectedProfileLazyRoute: typeof ProtectedProfileLazyRoute
  ProtectedReportsLazyRoute: typeof ProtectedReportsLazyRoute
  ProtectedSettingsLazyRoute: typeof ProtectedSettingsLazyRoute
  ProtectedStatisticLazyRoute: typeof ProtectedStatisticLazyRoute
  ProtectedBooksCreateRoute: typeof ProtectedBooksCreateRoute
  ProtectedBooksIndexRoute: typeof ProtectedBooksIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedGoalsLazyRoute: ProtectedGoalsLazyRoute,
  ProtectedProfileLazyRoute: ProtectedProfileLazyRoute,
  ProtectedReportsLazyRoute: ProtectedReportsLazyRoute,
  ProtectedSettingsLazyRoute: ProtectedSettingsLazyRoute,
  ProtectedStatisticLazyRoute: ProtectedStatisticLazyRoute,
  ProtectedBooksCreateRoute: ProtectedBooksCreateRoute,
  ProtectedBooksIndexRoute: ProtectedBooksIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/signIn': typeof authSignInRoute
  '/signUp': typeof authSignUpLazyRoute
  '/goals': typeof ProtectedGoalsLazyRoute
  '/profile': typeof ProtectedProfileLazyRoute
  '/reports': typeof ProtectedReportsLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/statistic': typeof ProtectedStatisticLazyRoute
  '/books/create': typeof ProtectedBooksCreateRoute
  '/books': typeof ProtectedBooksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/signIn': typeof authSignInRoute
  '/signUp': typeof authSignUpLazyRoute
  '/goals': typeof ProtectedGoalsLazyRoute
  '/profile': typeof ProtectedProfileLazyRoute
  '/reports': typeof ProtectedReportsLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/statistic': typeof ProtectedStatisticLazyRoute
  '/books/create': typeof ProtectedBooksCreateRoute
  '/books': typeof ProtectedBooksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/(auth)/signIn': typeof authSignInRoute
  '/(auth)/signUp': typeof authSignUpLazyRoute
  '/_protected/goals': typeof ProtectedGoalsLazyRoute
  '/_protected/profile': typeof ProtectedProfileLazyRoute
  '/_protected/reports': typeof ProtectedReportsLazyRoute
  '/_protected/settings': typeof ProtectedSettingsLazyRoute
  '/_protected/statistic': typeof ProtectedStatisticLazyRoute
  '/_protected/books/create': typeof ProtectedBooksCreateRoute
  '/_protected/books/': typeof ProtectedBooksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/signIn'
    | '/signUp'
    | '/goals'
    | '/profile'
    | '/reports'
    | '/settings'
    | '/statistic'
    | '/books/create'
    | '/books'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/signIn'
    | '/signUp'
    | '/goals'
    | '/profile'
    | '/reports'
    | '/settings'
    | '/statistic'
    | '/books/create'
    | '/books'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/(auth)/signIn'
    | '/(auth)/signUp'
    | '/_protected/goals'
    | '/_protected/profile'
    | '/_protected/reports'
    | '/_protected/settings'
    | '/_protected/statistic'
    | '/_protected/books/create'
    | '/_protected/books/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  authSignUpLazyRoute: typeof authSignUpLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  authSignInRoute: authSignInRoute,
  authSignUpLazyRoute: authSignUpLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/(auth)/signIn",
        "/(auth)/signUp"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/goals",
        "/_protected/profile",
        "/_protected/reports",
        "/_protected/settings",
        "/_protected/statistic",
        "/_protected/books/create",
        "/_protected/books/"
      ]
    },
    "/(auth)/signIn": {
      "filePath": "(auth)/signIn.tsx"
    },
    "/(auth)/signUp": {
      "filePath": "(auth)/signUp.lazy.tsx"
    },
    "/_protected/goals": {
      "filePath": "_protected/goals.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/profile": {
      "filePath": "_protected/profile.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/reports": {
      "filePath": "_protected/reports.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings": {
      "filePath": "_protected/settings.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/statistic": {
      "filePath": "_protected/statistic.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/books/create": {
      "filePath": "_protected/books/create.tsx",
      "parent": "/_protected"
    },
    "/_protected/books/": {
      "filePath": "_protected/books/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
